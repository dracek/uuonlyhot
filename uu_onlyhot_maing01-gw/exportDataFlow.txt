[
    {
        "id": "54ace4d9f27746f2",
        "type": "tab",
        "label": "Export average data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e62f89401ab2af8d",
        "type": "debug",
        "z": "54ace4d9f27746f2",
        "name": "debug data payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 400,
        "wires": []
    },
    {
        "id": "d554f67470a84459",
        "type": "mongodb4",
        "z": "54ace4d9f27746f2",
        "clientNode": "5376fae6dc0a9cbe",
        "mode": "collection",
        "collection": "data",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "994ff61cd5b63d26"
            ]
        ]
    },
    {
        "id": "d43803f8bac685b6",
        "type": "function",
        "z": "54ace4d9f27746f2",
        "name": "prepare agg pipeline",
        "func": "const periodInSeconds = 10 * 60;\n\nconst pipeline = [    \n  {\n    $match: { \n      sensorCode: msg.sensorCode\n    },\n  },\n  {\n    $set: {\n      roundedTimestamp: {\n        $add: [\n          { $subtract: [\"$timestamp\", {\n            $mod : [\"$timestamp\", periodInSeconds*1000]\n          }]},\n          periodInSeconds*1000\n        ],\n      }\n    }\n  },\n  {\n    $match: { \n      roundedTimestamp: { $lt: msg.payload.timestamp }\n    },\n  },\n  {\n    $group:\n      {\n        _id: \"$roundedTimestamp\",\n        temperature: {$avg: \"$temperature\" },\n        count: { $sum: 1 }\n      }\n  },\n  {\n    $set: {\n      timestamp: \"$_id\"\n    }\n  },\n  {\n    $unset: \"_id\",\n  }\n];\n\nmsg.payload = [pipeline];\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "d554f67470a84459"
            ]
        ]
    },
    {
        "id": "d6582c9bb6de6257",
        "type": "cronplus",
        "z": "54ace4d9f27746f2",
        "name": "Run!",
        "outputField": "payload.timestamp",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 2,17,32,47 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 130,
        "y": 100,
        "wires": [
            [
                "f38281fea5ea0821"
            ]
        ]
    },
    {
        "id": "f38281fea5ea0821",
        "type": "function",
        "z": "54ace4d9f27746f2",
        "name": "forEach sensor",
        "func": "const sensors = ['sen-1', 'fake-1']\n\nfor (let i = 0; i < sensors.length; i++) {\n        //node.warn(msg);\n        let clonedMsg = RED.util.cloneMessage(msg);\n        clonedMsg.sensorCode = sensors[i];\n        node.send(clonedMsg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "d43803f8bac685b6"
            ]
        ]
    },
    {
        "id": "994ff61cd5b63d26",
        "type": "switch",
        "z": "54ace4d9f27746f2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 460,
        "wires": [
            [
                "e27eba8c7fb62be4"
            ],
            [
                "6f9194b042fe84b0"
            ]
        ]
    },
    {
        "id": "6f9194b042fe84b0",
        "type": "debug",
        "z": "54ace4d9f27746f2",
        "name": "debug empty",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 520,
        "wires": []
    },
    {
        "id": "8d81bcd7d7861da8",
        "type": "comment",
        "z": "54ace4d9f27746f2",
        "name": "Run every 15 minutes, one message per sensor",
        "info": "",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "328bbb346028a037",
        "type": "comment",
        "z": "54ace4d9f27746f2",
        "name": "do not send empty data",
        "info": "",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "e27eba8c7fb62be4",
        "type": "function",
        "z": "54ace4d9f27746f2",
        "name": "set sensorCode",
        "func": "msg.payload = { sensorCode: msg.sensorCode, data: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "e62f89401ab2af8d"
            ]
        ]
    },
    {
        "id": "5376fae6dc0a9cbe",
        "type": "mongodb4-client",
        "name": "red",
        "protocol": "mongodb",
        "hostname": "127.0.0.1",
        "port": "27017",
        "dbName": "red",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    }
]